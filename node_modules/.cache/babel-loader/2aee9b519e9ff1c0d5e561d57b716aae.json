{"ast":null,"code":"var _jsxFileName = \"/Users/lpham/PROJECTS/pathfinder-project/src/components/pathfinder/PathfinderUI.jsx\";\nimport React, { Component } from 'react';\nimport Node from './node/Node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class PathfinderUI extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button__dijkstra\",\n          children: \"Visualize Dijkstra's Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button__dijkstra\",\n          children: \"Button 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp(),\n                row: row\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 25\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 5;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 15;\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 20; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","PathfinderUI","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","render","map","rowIdx","node","nodeIdx","isFinish","isStart","isWall","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"sources":["/Users/lpham/PROJECTS/pathfinder-project/src/components/pathfinder/PathfinderUI.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport Node from './node/Node';\n\nexport default class PathfinderUI extends Component {\n    constructor() {\n      super();\n      this.state = {\n        grid: [],\n        mouseIsPressed: false,\n      };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n\n    handleMouseUp() {\n        this.setState({mouseIsPressed: false});\n    }\n\n    render() {\n        const {grid, mouseIsPressed} = this.state;\n    \n        return (\n          <>\n            <div className='buttons'>\n                <button className='button__dijkstra'>\n                    Visualize Dijkstra's Algorithm\n                </button>\n                <button className='button__dijkstra'>\n                    Button 2\n                </button>\n            </div>\n            <div className=\"grid\">\n              {grid.map((row, rowIdx) => {\n                return (\n                  <div key={rowIdx}>\n                    {row.map((node, nodeIdx) => {\n                      const {row, col, isFinish, isStart, isWall} = node;\n                      return (\n                        <Node\n                          key={nodeIdx}\n                          col={col}\n                          isFinish={isFinish}\n                          isStart={isStart}\n                          isWall={isWall}\n                          mouseIsPressed={mouseIsPressed}\n                          onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                          onMouseEnter={(row, col) =>\n                            this.handleMouseEnter(row, col)\n                          }\n                          onMouseUp={() => this.handleMouseUp()}\n                          row={row}></Node>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        );\n      }\n}\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 5;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 15;\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 20; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n  \n  const createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n  \n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}