{"ast":null,"code":"import React, { Component } from 'react';\nimport Node from './node/Node';\nexport default class PathfinderUI extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","PathfinderUI","constructor","state","grid","mouseIsPressed","getInitialGrid","row","currentRow","col","push","createNode","isStart","START_NODE_ROW","START_NODE_COL","isFinish","FINISH_NODE_ROW","FINISH_NODE_COL","distance","Infinity","isVisited","isWall","previousNode","getNewGridWithWallToggled","newGrid","slice","node","newNode"],"sources":["/Users/lpham/PROJECTS/pathfinder-project/src/components/pathfinder/PathfinderUI.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport Node from './node/Node';\n\nexport default class PathfinderUI extends Component {\n    constructor() {\n      super();\n      this.state = {\n        grid: [],\n        mouseIsPressed: false,\n      };\n    }\n\n}\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n  \n  const createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n  \n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,eAAe,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;EAChDG,WAAW,GAAG;IACZ;IACA,KAAKC,KAAL,GAAa;MACXC,IAAI,EAAE,EADK;MAEXC,cAAc,EAAE;IAFL,CAAb;EAID;;AAP+C;;AAWpD,MAAMC,cAAc,GAAG,MAAM;EACzB,MAAMF,IAAI,GAAG,EAAb;;EACA,KAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;IACjC,MAAMC,UAAU,GAAG,EAAnB;;IACA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;MACjCD,UAAU,CAACE,IAAX,CAAgBC,UAAU,CAACF,GAAD,EAAMF,GAAN,CAA1B;IACD;;IACDH,IAAI,CAACM,IAAL,CAAUF,UAAV;EACD;;EACD,OAAOJ,IAAP;AACD,CAVH;;AAYE,MAAMO,UAAU,GAAG,CAACF,GAAD,EAAMF,GAAN,KAAc;EAC/B,OAAO;IACLE,GADK;IAELF,GAFK;IAGLK,OAAO,EAAEL,GAAG,KAAKM,cAAR,IAA0BJ,GAAG,KAAKK,cAHtC;IAILC,QAAQ,EAAER,GAAG,KAAKS,eAAR,IAA2BP,GAAG,KAAKQ,eAJxC;IAKLC,QAAQ,EAAEC,QALL;IAMLC,SAAS,EAAE,KANN;IAOLC,MAAM,EAAE,KAPH;IAQLC,YAAY,EAAE;EART,CAAP;AAUD,CAXD;;AAaA,MAAMC,yBAAyB,GAAG,CAACnB,IAAD,EAAOG,GAAP,EAAYE,GAAZ,KAAoB;EACpD,MAAMe,OAAO,GAAGpB,IAAI,CAACqB,KAAL,EAAhB;EACA,MAAMC,IAAI,GAAGF,OAAO,CAACjB,GAAD,CAAP,CAAaE,GAAb,CAAb;EACA,MAAMkB,OAAO,GAAG,EACd,GAAGD,IADW;IAEdL,MAAM,EAAE,CAACK,IAAI,CAACL;EAFA,CAAhB;EAIAG,OAAO,CAACjB,GAAD,CAAP,CAAaE,GAAb,IAAoBkB,OAApB;EACA,OAAOH,OAAP;AACD,CATD"},"metadata":{},"sourceType":"module"}